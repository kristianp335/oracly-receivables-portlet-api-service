/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.oracly.accounts.receivable.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.exportimport.kernel.lar.StagedModelType;

import com.liferay.oracly.accounts.receivable.model.Receivable;
import com.liferay.oracly.accounts.receivable.model.ReceivableModel;
import com.liferay.oracly.accounts.receivable.model.ReceivableSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Receivable service. Represents a row in the &quot;Oracly_Receivable&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link ReceivableModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ReceivableImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ReceivableImpl
 * @see Receivable
 * @see ReceivableModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class ReceivableModelImpl extends BaseModelImpl<Receivable>
	implements ReceivableModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a receivable model instance should use the {@link Receivable} interface instead.
	 */
	public static final String TABLE_NAME = "Oracly_Receivable";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "fooId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "dueDate", Types.TIMESTAMP },
			{ "amount", Types.DOUBLE },
			{ "description", Types.VARCHAR },
			{ "path_", Types.VARCHAR },
			{ "documentId", Types.BIGINT },
			{ "flag", Types.INTEGER },
			{ "supplierName", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("fooId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("dueDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("amount", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("description", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("path_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("documentId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("flag", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("supplierName", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table Oracly_Receivable (uuid_ VARCHAR(75) null,fooId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,dueDate DATE null,amount DOUBLE,description VARCHAR(75) null,path_ VARCHAR(75) null,documentId LONG,flag INTEGER,supplierName VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table Oracly_Receivable";
	public static final String ORDER_BY_JPQL = " ORDER BY receivable.dueDate ASC";
	public static final String ORDER_BY_SQL = " ORDER BY Oracly_Receivable.dueDate ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.oracly.accounts.receivable.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.oracly.accounts.receivable.model.Receivable"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.oracly.accounts.receivable.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.oracly.accounts.receivable.model.Receivable"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.oracly.accounts.receivable.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.oracly.accounts.receivable.model.Receivable"),
			true);
	public static final long AMOUNT_COLUMN_BITMASK = 1L;
	public static final long COMPANYID_COLUMN_BITMASK = 2L;
	public static final long GROUPID_COLUMN_BITMASK = 4L;
	public static final long UUID_COLUMN_BITMASK = 8L;
	public static final long DUEDATE_COLUMN_BITMASK = 16L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Receivable toModel(ReceivableSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Receivable model = new ReceivableImpl();

		model.setUuid(soapModel.getUuid());
		model.setFooId(soapModel.getFooId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setDueDate(soapModel.getDueDate());
		model.setAmount(soapModel.getAmount());
		model.setDescription(soapModel.getDescription());
		model.setPath(soapModel.getPath());
		model.setDocumentId(soapModel.getDocumentId());
		model.setFlag(soapModel.getFlag());
		model.setSupplierName(soapModel.getSupplierName());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Receivable> toModels(ReceivableSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Receivable> models = new ArrayList<Receivable>(soapModels.length);

		for (ReceivableSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.oracly.accounts.receivable.service.util.ServiceProps.get(
				"lock.expiration.time.com.liferay.oracly.accounts.receivable.model.Receivable"));

	public ReceivableModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _fooId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setFooId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _fooId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Receivable.class;
	}

	@Override
	public String getModelClassName() {
		return Receivable.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("fooId", getFooId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("dueDate", getDueDate());
		attributes.put("amount", getAmount());
		attributes.put("description", getDescription());
		attributes.put("path", getPath());
		attributes.put("documentId", getDocumentId());
		attributes.put("flag", getFlag());
		attributes.put("supplierName", getSupplierName());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long fooId = (Long)attributes.get("fooId");

		if (fooId != null) {
			setFooId(fooId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Date dueDate = (Date)attributes.get("dueDate");

		if (dueDate != null) {
			setDueDate(dueDate);
		}

		Double amount = (Double)attributes.get("amount");

		if (amount != null) {
			setAmount(amount);
		}

		String description = (String)attributes.get("description");

		if (description != null) {
			setDescription(description);
		}

		String path = (String)attributes.get("path");

		if (path != null) {
			setPath(path);
		}

		Long documentId = (Long)attributes.get("documentId");

		if (documentId != null) {
			setDocumentId(documentId);
		}

		Integer flag = (Integer)attributes.get("flag");

		if (flag != null) {
			setFlag(flag);
		}

		String supplierName = (String)attributes.get("supplierName");

		if (supplierName != null) {
			setSupplierName(supplierName);
		}
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getFooId() {
		return _fooId;
	}

	@Override
	public void setFooId(long fooId) {
		_fooId = fooId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return StringPool.BLANK;
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public Date getDueDate() {
		return _dueDate;
	}

	@Override
	public void setDueDate(Date dueDate) {
		_columnBitmask = -1L;

		_dueDate = dueDate;
	}

	@JSON
	@Override
	public Double getAmount() {
		return _amount;
	}

	@Override
	public void setAmount(Double amount) {
		_columnBitmask |= AMOUNT_COLUMN_BITMASK;

		if (!_setOriginalAmount) {
			_setOriginalAmount = true;

			_originalAmount = _amount;
		}

		_amount = amount;
	}

	public Double getOriginalAmount() {
		return _originalAmount;
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@JSON
	@Override
	public String getPath() {
		if (_path == null) {
			return StringPool.BLANK;
		}
		else {
			return _path;
		}
	}

	@Override
	public void setPath(String path) {
		_path = path;
	}

	@JSON
	@Override
	public long getDocumentId() {
		return _documentId;
	}

	@Override
	public void setDocumentId(long documentId) {
		_documentId = documentId;
	}

	@JSON
	@Override
	public int getFlag() {
		return _flag;
	}

	@Override
	public void setFlag(int flag) {
		_flag = flag;
	}

	@JSON
	@Override
	public String getSupplierName() {
		if (_supplierName == null) {
			return StringPool.BLANK;
		}
		else {
			return _supplierName;
		}
	}

	@Override
	public void setSupplierName(String supplierName) {
		_supplierName = supplierName;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(PortalUtil.getClassNameId(
				Receivable.class.getName()));
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			Receivable.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Receivable toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Receivable)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ReceivableImpl receivableImpl = new ReceivableImpl();

		receivableImpl.setUuid(getUuid());
		receivableImpl.setFooId(getFooId());
		receivableImpl.setGroupId(getGroupId());
		receivableImpl.setCompanyId(getCompanyId());
		receivableImpl.setUserId(getUserId());
		receivableImpl.setUserName(getUserName());
		receivableImpl.setCreateDate(getCreateDate());
		receivableImpl.setModifiedDate(getModifiedDate());
		receivableImpl.setDueDate(getDueDate());
		receivableImpl.setAmount(getAmount());
		receivableImpl.setDescription(getDescription());
		receivableImpl.setPath(getPath());
		receivableImpl.setDocumentId(getDocumentId());
		receivableImpl.setFlag(getFlag());
		receivableImpl.setSupplierName(getSupplierName());

		receivableImpl.resetOriginalValues();

		return receivableImpl;
	}

	@Override
	public int compareTo(Receivable receivable) {
		int value = 0;

		value = DateUtil.compareTo(getDueDate(), receivable.getDueDate());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Receivable)) {
			return false;
		}

		Receivable receivable = (Receivable)obj;

		long primaryKey = receivable.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		ReceivableModelImpl receivableModelImpl = this;

		receivableModelImpl._originalUuid = receivableModelImpl._uuid;

		receivableModelImpl._originalGroupId = receivableModelImpl._groupId;

		receivableModelImpl._setOriginalGroupId = false;

		receivableModelImpl._originalCompanyId = receivableModelImpl._companyId;

		receivableModelImpl._setOriginalCompanyId = false;

		receivableModelImpl._setModifiedDate = false;

		receivableModelImpl._originalAmount = receivableModelImpl._amount;

		receivableModelImpl._setOriginalAmount = false;

		receivableModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Receivable> toCacheModel() {
		ReceivableCacheModel receivableCacheModel = new ReceivableCacheModel();

		receivableCacheModel.uuid = getUuid();

		String uuid = receivableCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			receivableCacheModel.uuid = null;
		}

		receivableCacheModel.fooId = getFooId();

		receivableCacheModel.groupId = getGroupId();

		receivableCacheModel.companyId = getCompanyId();

		receivableCacheModel.userId = getUserId();

		receivableCacheModel.userName = getUserName();

		String userName = receivableCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			receivableCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			receivableCacheModel.createDate = createDate.getTime();
		}
		else {
			receivableCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			receivableCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			receivableCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		Date dueDate = getDueDate();

		if (dueDate != null) {
			receivableCacheModel.dueDate = dueDate.getTime();
		}
		else {
			receivableCacheModel.dueDate = Long.MIN_VALUE;
		}

		receivableCacheModel.amount = getAmount();

		receivableCacheModel.description = getDescription();

		String description = receivableCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			receivableCacheModel.description = null;
		}

		receivableCacheModel.path = getPath();

		String path = receivableCacheModel.path;

		if ((path != null) && (path.length() == 0)) {
			receivableCacheModel.path = null;
		}

		receivableCacheModel.documentId = getDocumentId();

		receivableCacheModel.flag = getFlag();

		receivableCacheModel.supplierName = getSupplierName();

		String supplierName = receivableCacheModel.supplierName;

		if ((supplierName != null) && (supplierName.length() == 0)) {
			receivableCacheModel.supplierName = null;
		}

		return receivableCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(31);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", fooId=");
		sb.append(getFooId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", dueDate=");
		sb.append(getDueDate());
		sb.append(", amount=");
		sb.append(getAmount());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append(", path=");
		sb.append(getPath());
		sb.append(", documentId=");
		sb.append(getDocumentId());
		sb.append(", flag=");
		sb.append(getFlag());
		sb.append(", supplierName=");
		sb.append(getSupplierName());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(49);

		sb.append("<model><model-name>");
		sb.append("com.liferay.oracly.accounts.receivable.model.Receivable");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fooId</column-name><column-value><![CDATA[");
		sb.append(getFooId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dueDate</column-name><column-value><![CDATA[");
		sb.append(getDueDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>amount</column-name><column-value><![CDATA[");
		sb.append(getAmount());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>path</column-name><column-value><![CDATA[");
		sb.append(getPath());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>documentId</column-name><column-value><![CDATA[");
		sb.append(getDocumentId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>flag</column-name><column-value><![CDATA[");
		sb.append(getFlag());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>supplierName</column-name><column-value><![CDATA[");
		sb.append(getSupplierName());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = Receivable.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			Receivable.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _fooId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private Date _dueDate;
	private Double _amount;
	private Double _originalAmount;
	private boolean _setOriginalAmount;
	private String _description;
	private String _path;
	private long _documentId;
	private int _flag;
	private String _supplierName;
	private long _columnBitmask;
	private Receivable _escapedModel;
}